<?xml version="1.0"?>
<jbossesb parameterReloadSecs="5"
	xmlns="http://anonsvn.labs.jboss.com/labs/jbossesb/trunk/product/etc/schemas/xml/jbossesb-1.3.0.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://anonsvn.labs.jboss.com/labs/jbossesb/trunk/product/etc/schemas/xml/jbossesb-1.3.0.xsd http://anonsvn.jboss.org/repos/labs/labs/jbossesb/trunk/product/etc/schemas/xml/jbossesb-1.3.0.xsd">
	<providers> 
		<!-- JMS Topic to listen events from Ellipse for HR -->
		<jms-provider connection-factory="ConnectionFactory"
			jndi-URL="${ellipse.event.jms.url}" jndi-context-factory="org.jnp.interfaces.NamingContextFactory"
			name="ellipse-events"> 
			<jms-bus busid="NonEmployeeEventGW">   
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table='MSF811' AND type IN('create', 'update')"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="EmployeeEventGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table IN('MSF810', 'MSF760', 'MSF878') AND type IN('create', 'update', 'delete')"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="EmployeePositionEventGW"> 
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table IN('MSF870', 'MSF875') AND type IN('create', 'update')"
					transacted="true" />
			</jms-bus> 
			<jms-bus busid="TrainingCourseEventGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table='MSF770' AND type IN('create', 'update')"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="TrainingResultsEventGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table='MSF772' AND type IN('create','update')"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="ResourceEventGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table IN('MSF765','MSF812') AND type IN('create','update','delete')"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="PersonnelLeaveEventGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table='MSF888' AND type IN('create', 'update')"
					transacted="true" />
			</jms-bus>
			<!-- JMS Topic to listen events from Ellipse for AWM -->
			<jms-bus busid="TableCodeCreateGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table='MSF010' AND type='create'"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="TableCodeUpdateGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table='MSF010' AND type='update'"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="StandardJobGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table IN('MSF690','MSF693') AND type IN('create', 'update')"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="EquipmentGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table IN('MSF600') AND type IN('create', 'update')"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="WorkOrderGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table IN('MSF620') AND type IN('create', 'update')"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="WorkOrderTaskGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table IN('MSF623') AND type IN('create', 'update')"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="PlannedMaintenanceGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="${ellipse.event.jms.topic}" dest-type="TOPIC"
					selector="table IS NOT NULL AND type IS NOT NULL AND table IN('MSF700') AND type IN('create', 'update')"
					transacted="true" />
			</jms-bus>
		</jms-provider>
		<jms-jca-provider adapter="hornetq-ra.rar"
			connection-factory="XAConnectionFactory" name="jms-jca-provider"
			transacted="true">
			<property name="jcaActivationMapper"
				value="org.jboss.soa.esb.listeners.jca.JBossActivationMapper" />
	
			<!-- HR dedicated Queue's to execute parallel messages at a time -->
			<jms-bus busid="NonEmployee.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-NonEmployee.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="Employee.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-Employee.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="EmployeePosition.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-EmployeePosition.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="TrainingCourse.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-TrainingCourse.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="TrainingResults.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-TrainingResults.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="EmpResource.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-EmpResource.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="PersonnelLeave.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-PersonnelLeave.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<!-- AWM dedicated Queue's to execute parallel messages at a time -->
			<jms-bus busid="OUTBOUND.REPLY">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="${mib.jms.queue.name.reply:queue/MIB.COMMON.REPLY}"
					dest-type="QUEUE" persistent="true" selector="ClientID = 'THEOS'"
					transacted="true" />
			</jms-bus>
			<jms-bus busid="TableCode.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-TableCode.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="StandardJob.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-StandardJob.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="Equipment.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-Equipment.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="WorkOrder.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-WorkOrder.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="PlannedMaintenance.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-PlannedMaintenance.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<jms-bus busid="WorkOrderTask.GW">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="queue/TG.Publish-WorkOrderTask.GW" dest-type="QUEUE"
					persistent="true" transacted="true" />
			</jms-bus>
			<!-- Durable subscription properties -->
			<activation-config>
				<property name="reconnectInterval" value="1000" />
				<!-- We don't want to buffer the consumer side so we can better control 
					consumption from the queues -->
				<property name="ConsumerWindowSize" value="0" />
			</activation-config>
		</jms-jca-provider>
	</providers>
	<!--***************************************************************************************** 
		***************************** Ellipse-AAT interface services **************************** 
		***************************************************************************************** -->
	<services>
		<!-- Non Employee Service -->
		<service category="tg-hr-publish" description="Ellipse event messages for Non Employee"
			invmScope="GLOBAL" name="NonEmployee">
			<listeners>
				<jms-listener busidref="NonEmployeeEventGW" is-gateway="true"
					maxThreads="1" name="NonEmployeeServiceListener" />
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToGetNonEmployee">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/NonEmployeeMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToEllipse">
					<property name="jndiName" value="queue/TG.Publish-NonEmployee.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Employee Service -->
		<service category="tg-hr-publish" description="Ellipse event messages for Employee"
			invmScope="GLOBAL" name="EmployeeService">
			<listeners>
				<jms-listener busidref="EmployeeEventGW" is-gateway="true"
					maxThreads="1" name="EmployeeServiceListener" />
			</listeners>
			<actions mep="OneWay"> 
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToGetPersonnel">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/EmployeeMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action> 
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToEllipse">
					<property name="jndiName" value="queue/TG.Publish-Employee.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Employee Position Service -->
		<service category="tg-hr-publish"
			description="Ellipse event messages for Employee Position" invmScope="GLOBAL"
			name="EmployeePositionService">
			<listeners>
				<jms-listener busidref="EmployeePositionEventGW"
					is-gateway="true" maxThreads="1" name="EmployeeServiceListener" />
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToGetTrainingCourse">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/EmployeePositionMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToEllipse">
					<property name="jndiName" value="queue/TG.Publish-EmployeePosition.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Training Course Service -->
		<service category="tg-hr-publish" description="Ellipse event messages for Training Course"
			invmScope="GLOBAL" invmTransacted="false" name="TrainingCourseService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="TrainingCourseEventGW"
					is-gateway="true" maxThreads="1" name="TrainingCourseServiceListener" />
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToGetTrainingCourse">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/TrainingCourseMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToEllipse">
					<property name="jndiName" value="queue/TG.Publish-TrainingCourse.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- People Training Results Service -->
		<service category="tg-hr-publish" description="People Training Results"
			invmScope="GLOBAL" invmTransacted="false" name="TrainingResultsService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="TrainingResultsEventGW"
					is-gateway="true" maxThreads="1" name="TrainingResultsServiceListener" />
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToGetTrainingCourse">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/TrainingResultsMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToEllipse">
					<property name="jndiName" value="queue/TG.Publish-TrainingResults.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Filters Ellipse Topic event messages. -->
		<service category="tg-hr-publish"
			description="Filters Ellipse Topic event messages for TransGrid messages"
			invmScope="GLOBAL" invmTransacted="false" name="AATFilterService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="ResourceEventGW" is-gateway="true"
					maxThreads="1" name="ResourceServiceListener" />
			</listeners>
			<actions mep="OneWay">
				<!-- <action class="org.jboss.soa.esb.actions.SystemPrintln" name="Echo"> 
					<property name="message" value="Result" /> <property name="printfull" value="true" 
					/> </action> -->
				<action class="org.jboss.soa.esb.actions.ContentBasedRouter"
					name="AATFilterServiceRouter" process="process">
					<property name="cbrAlias" value="Xpath" />
					<property name="ruleLanguage" />
					<property name="destinations">
						<route-to destination-name="ResourceService"
							expression="/com.mincom.ellipse.edoi.ejb.msf765.MSF765Rec/primaryKey/empResInd[text()='C'] or /com.mincom.ellipse.edoi.ejb.msf765.MSF765Key[empResInd[text()='C']]                                or /com.mincom.ellipse.edoi.ejb.msf812.MSF812Rec[primaryKey/nonEmplId[normalize-space(text())!='']]                                or /com.mincom.ellipse.edoi.ejb.msf812.MSF812Key/nonEmplId[normalize-space(text())!='']"
							service-category="tg-hr-publish" service-name="ResourceService" />
					</property>
				</action>
			</actions>
		</service>
		<!-- People Resource Details Service -->
		<service category="tg-hr-publish" description="People Resource details"
			invmScope="GLOBAL" invmTransacted="false" name="ResourceService">
			<property name="inVMLockStep" value="true" />
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToGetResource">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/ResourceMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToEllipse">
					<property name="jndiName" value="queue/TG.Publish-EmpResource.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Personnel Leave Service -->
		<service category="tg-hr-publish" description="Personnel Leave Service"
			invmScope="GLOBAL" invmTransacted="false" name="PersonnelLeaveService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="PersonnelLeaveEventGW"
					is-gateway="true" maxThreads="1" name="PersonnelLeaveEventGWListener" />
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToGetPersonnelLeave">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/PersonnelLeaveMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToEllipse">
					<property name="jndiName" value="queue/TG.Publish-PersonnelLeave.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		
		<!-- Non Employee gateway listener service -->
		<service category="tg-hr-publish" description="Non Employee publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="NonEmployeePublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="NonEmployee.GW" is-gateway="true"
					maxThreads="1" name="NonEmployeeGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-hr-publish" />
					<property name="replayTarget" value="tg-hr-publish:NonEmployeePublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-HR channel for NonEmployeePublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Non Employee service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="ConvertXMLtoDTO">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/NonEmployeeGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.transgrid.mib.ellipse.hr.action.NonEmployeeAction"
					name="NonEmployee" process="process">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/NonEmployeeShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- Employee gateway listener service -->
		<service category="tg-hr-publish" description="Employee publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="EmployeePublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="Employee.GW" is-gateway="true"
					maxThreads="1" name="EmployeeGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-hr-publish" />
					<property name="replayTarget" value="tg-hr-publish:EmployeePublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-HR channel for EmployeePublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Employee service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="ConvertXMLtoDTO">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/EmployeeGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<!-- Invoke Employee action to call Ellipse service -->
				<action class="com.transgrid.mib.ellipse.hr.action.EmployeeAction"
					name="Employee" process="processEmp">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/EmployeeShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- Employee Position gateway listener service -->
		<service category="tg-hr-publish" description="Employee Position publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="EmployeePositionPublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="EmployeePosition.GW"
					is-gateway="true" maxThreads="1" name="EmployeePositionGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-hr-publish" />
					<property name="replayTarget"
						value="tg-hr-publish:EmployeePositionPublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-HR channel for EmployeePositionPublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Employee Position service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="ConvertXMLtoDTO">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/EmployeePositionGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<!-- Invoke Employee Position action to call Ellipse service -->
				<action class="com.transgrid.mib.ellipse.hr.action.EmployeeAction"
					name="EmployeePosition" process="processEmpPosition">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/EmployeePositionShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- Training Course gateway listener service -->
		<service category="tg-hr-publish" description="Training Course publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="TrainingCoursePublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="TrainingCourse.GW" is-gateway="true"
					maxThreads="1" name="TrainingCourseGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-hr-publish" />
					<property name="replayTarget"
						value="tg-hr-publish:TrainingCoursePublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-HR channel for TrainingCoursePublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Training Course service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="ConvertXMLtoDTO">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/TrainingCourseGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<!-- Invoke Training course action to call Ellipse service -->
				<action class="com.transgrid.mib.ellipse.hr.action.TrainingCourseAction"
					name="TrainingCourse" process="process">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/TrainingCourseShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- Training Results gateway listener service -->
		<service category="tg-hr-publish" description="Training Results publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="TrainingResultsPublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="TrainingResults.GW" is-gateway="true"
					maxThreads="1" name="TrainingResultsGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-hr-publish" />
					<property name="replayTarget"
						value="tg-hr-publish:TrainingResultsPublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-HR channel for TrainingResultsPublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Training Results service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="ConvertXMLtoDTO">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/TrainingResultsGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<!-- Invoke Training action to call Ellipse service -->
				<action class="com.transgrid.mib.ellipse.hr.action.TrainingResultsAction"
					name="TrainingResults" process="process">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/TrainingResultsShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- Employee Resource gateway listener service -->
		<service category="tg-hr-publish" description="Employee Resource publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="ResourcePublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="EmpResource.GW" is-gateway="true"
					maxThreads="1" name="EmpResourceGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-hr-publish" />
					<property name="replayTarget" value="tg-hr-publish:ResourcePublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-HR channel for ResourcePublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Employee Resource service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="ConvertXMLtoDTO">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/ResourceGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<!-- Invoke Resource action to call Ellipse service -->
				<action class="com.transgrid.mib.ellipse.hr.action.ResourceAction"
					name="ResourceData" process="process">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/ResourceShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		
		<!-- Personnel Leave gateway listener service -->
		<service category="tg-hr-publish" description="Personnel Leave publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="PersonnelLeavePublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="PersonnelLeave.GW" is-gateway="true"
					maxThreads="1" name="PersonnelLeaveGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-hr-publish" />
					<property name="replayTarget" value="tg-hr-publish:PersonnelLeavePublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-HR channel for PersonnelLeavePublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Personnel Leave service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="ConvertXMLtoDTO">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/PersonnelLeaveGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<!-- Invoke Resource action to call Ellipse service -->
				<action class="com.transgrid.mib.ellipse.hr.action.EmployeeAction"
					name="PersonnelLeave" process="processPersonnelLeave">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/PersonnelLeaveShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		
		<!--***************************************************************************************** 
			************************ Ellipse-THEOS interface Outbound services ************************** 
			***************************************************************************************** 
			Table Code Service for Update operation -->
		<service category="tg-awm-publish"
			description="Ellipse event messages for Table Code Update" invmScope="GLOBAL"
			invmTransacted="false" name="TableCodeUpdateService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="TableCodeUpdateGW" is-gateway="true"
					maxThreads="1" name="TableCodeUpdateListener" />
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToUpdateCodeMessage">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/CodeEntryUpdateMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToTableCode">
					<property name="jndiName" value="queue/TG.Publish-TableCode.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Table Code Service for Create operation -->
		<service category="tg-awm-publish"
			description="Ellipse event messages for Table Code Create" invmScope="GLOBAL"
			invmTransacted="false" name="TableCodeCreateService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="TableCodeCreateGW" is-gateway="true"
					maxThreads="1" name="TableCodeCreateListener" />
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToCreateCodeMessage">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/CodeEntryCreateMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToTableCode">
					<property name="jndiName" value="queue/TG.Publish-TableCode.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Filters Ellipse Topic event messages, we only want messages with the 
			TransGrid district code. -->
		<service category="tg-awm-publish"
			description="Filters Ellipse Topic event messages for TransGrid messages"
			invmScope="GLOBAL" invmTransacted="false" name="DistrictCodeFilterService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="StandardJobGW" is-gateway="true"
					maxThreads="1" name="StandardJobListener" />
				<jms-listener busidref="WorkOrderGW" is-gateway="true"
					maxThreads="1" name="WorkOrderListener" />
				<jms-listener busidref="WorkOrderTaskGW" is-gateway="true"
					maxThreads="1" name="WorkOrderTaskListener" />
				<jms-listener busidref="EquipmentGW" is-gateway="true"
					maxThreads="1" name="EquipmentListener" />
				<jms-listener busidref="PlannedMaintenanceGW"
					is-gateway="true" maxThreads="1" name="PlannedMaintenanceListener" />
			</listeners>
			<actions mep="OneWay">
				<!-- <action class="org.jboss.soa.esb.actions.SystemPrintln" name="Echo"> 
					<property name="message" value="Result" /> <property name="printfull" value="true" 
					/> </action> -->
				<action class="org.jboss.soa.esb.actions.ContentBasedRouter"
					name="EquipmentServiceRouter" process="process">
					<property name="cbrAlias" value="Xpath" />
					<property name="ruleLanguage" />
					<property name="destinations">
						<route-to destination-name="WorkOrderTaskRouter"
							expression="/com.mincom.ellipse.edoi.ejb.msf623.MSF623Rec[primaryKey/dstrctCode='GRID']"
							service-category="tg-awm-publish" service-name="WorkOrderTaskRouter" />
						<route-to destination-name="WorkOrderTaskCrewRouter"
							expression="/com.mincom.ellipse.edoi.ejb.msf623.MSF623Rec[primaryKey[@reference='../crewTaskRecs/key'] and crewTaskRecs/key/dstrctCode='GRID']"
							service-category="tg-awm-publish" service-name="WorkOrderTaskCrewRouter" />
						<route-to destination-name="StandardJobService"
							expression="/com.mincom.ellipse.edoi.ejb.msf690.MSF690Rec[primaryKey/dstrctCode='GRID'] or /com.mincom.ellipse.edoi.ejb.msf693.MSF693Rec[primaryKey/dstrctCode='GRID']"
							service-category="tg-awm-publish" service-name="StandardJobService" />
						<route-to destination-name="EquipmentService"
							expression="/com.mincom.ellipse.edoi.ejb.msf600.MSF600Rec[dstrctCode='GRID']"
							service-category="tg-awm-publish" service-name="EquipmentService" />
						<route-to destination-name="WorkOrderService"
							expression="/com.mincom.ellipse.edoi.ejb.msf620.MSF620Rec[primaryKey/dstrctCode='GRID']"
							service-category="tg-awm-publish" service-name="WorkOrderService" />
						<route-to
							expression="/com.mincom.ellipse.edoi.ejb.msf700.MSF700Rec/dstrctCode[text()='GRID'] and //primaryKey/rec__700Type[text()='ES'] and /com.mincom.ellipse.edoi.ejb.msf700.MSF700Rec/stdJobNo[normalize-space(text())!='']"
							service-category="tg-awm-publish" service-name="PlannedMaintenanceService" />
					</property>
				</action>
			</actions>
		</service>
		<!-- WorkOrder Task with correct event message structure -->
		<service category="tg-awm-publish" description="map valid work order task to OAGis"
			invmScope="GLOBAL" invmTransacted="false" name="WorkOrderTaskRouter">
			<property name="inVMLockStep" value="true" />
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformWorkOrderTaskMessage">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/WorkOrderTaskMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.StaticRouter" name="routeAction">
					<property name="destinations">
						<route-to service-category="tg-awm-publish" service-name="WorkOrderTaskService" />
					</property>
				</action>
			</actions>
		</service>
		<!-- WorkOrder Task with incorrect event message structure -->
		<service category="tg-awm-publish" description="map invalid work order task to OAGis"
			invmScope="GLOBAL" invmTransacted="false" name="WorkOrderTaskCrewRouter">
			<property name="inVMLockStep" value="true" />
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformWorkOrderTaskMessage">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/WorkOrderTaskCrewMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.StaticRouter" name="routeAction">
					<property name="destinations">
						<route-to service-category="tg-awm-publish" service-name="WorkOrderTaskService" />
					</property>
				</action>
			</actions>
		</service>
		<!-- Standard Job and Standard Job Task Create / Update Service -->
		<service category="tg-awm-publish"
			description="Ellipse event messages for Standard Job Create / Update"
			invmScope="GLOBAL" invmTransacted="false" name="StandardJobService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToGetStandardJobMessage">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/StandardJobMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToStandardJob">
					<property name="jndiName" value="queue/TG.Publish-StandardJob.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Equipment Service for Create and Update operation -->
		<service category="tg-awm-publish"
			description="Ellipse event messages for Equipment Create and Update"
			invmScope="GLOBAL" invmTransacted="false" name="EquipmentService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformEquipmentMessage">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/EquipmentMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToEquipment">
					<property name="jndiName" value="queue/TG.Publish-Equipment.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Work Order Service for Create and Update operation -->
		<service category="tg-awm-publish"
			description="Ellipse event messages for Work Order Create and Update"
			invmScope="GLOBAL" invmTransacted="false" name="WorkOrderService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformWorkOrderMessage">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/WorkOrderMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToWorkOrder">
					<property name="jndiName" value="queue/TG.Publish-WorkOrder.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- Planned Maintenance Create / Update Service -->
		<service category="tg-awm-publish"
			description="Ellipse event messages for Planned Maintenance Create / Update"
			invmScope="GLOBAL" invmTransacted="false" name="PlannedMaintenanceService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformToGetPlannedMaintenanceMessage">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/PlannedMaintenanceMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToPlannedMaintenance">
					<property name="jndiName" value="queue/TG.Publish-PlannedMaintenance.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- WorkOrderTask Service -->
		<service category="tg-awm-publish"
			description="Ellipse event messages for Work Order Task deatils"
			invmScope="GLOBAL" invmTransacted="false" name="WorkOrderTaskService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<actions mep="OneWay">
				<!-- <action class="com.mincom.mib.esb.action.SetPropertyAction" name="SetProperties"> 
					<property name="properties"> <set name="TransGridChannel">'THEOS'</set> <set 
					name="ClientID">'THEOS'</set> </property> </action> -->
				<action class="org.jboss.soa.esb.actions.routing.JMSRouter"
					name="RouteToEllipse">
					<property name="jndiName" value="queue/TG.Publish-WorkOrderTask.GW" />
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}" />
					<property name="jndi-URL" value="${mib.jms.url}" />
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}" />
					<property name="unwrap" value="true" />
				</action>
			</actions>
		</service>
		<!-- WorkOrder Task gateway listener service -->
		<service category="tg-awm-publish" description="Workorder Task publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="WorkOrderTaskPublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="WorkOrderTask.GW" is-gateway="true"
					maxThreads="1" name="WorkOrderTaskGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="com.mincom.mib.esb.action.SetPropertyAction"
					name="SetProperties">
					<property name="properties">
						<set name="ClientID">'THEOS'</set> 
					</property>
				</action>
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-awm-publish" />
					<property name="replayTarget"
						value="tg-awm-publish:WorkOrderTaskPublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-AWM channel for WorkOrderTaskPublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToTaskDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/WorkOrderTaskGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action> 
				<action class="com.transgrid.mib.ellipse.theos.action.WorkOrderTaskAction"
					name="GetWorkOrderTask" process="get">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="TransformMaintenanceOrderLine">
					<property name="smooksConfig"
						value="/transforms/ellipse/outbound/MaintenanceOrderLineMessageMapping.xml" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Workorder task service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/MaintenanceOrderGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.workorder.WorkOrderAction"
					name="MaintenanceOrderGet" process="get">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/MaintenanceOrderShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- Table code gateway listener service -->
		<service category="tg-awm-publish" description="Table code publish     channel"
			invmScope="GLOBAL" invmTransacted="false" name="TableCodePublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="TableCode.GW" is-gateway="true"
					maxThreads="1" name="TableCodeGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="com.mincom.mib.esb.action.SetPropertyAction"
					name="SetProperties">
					<property name="properties">
						<set name="ClientID">'THEOS'</set>
					</property>
				</action>
				<action class="org.jboss.soa.esb.actions.SystemPrintln" name="Echo"> 
					<property name="message" value="Result" /> <property name="printfull" value="true" 
					/> </action>
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-awm-publish" />
					<property name="replayTarget" value="tg-awm-publish:TableCodePublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-AWM channel for TableCodePublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Tabale code service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/CodeEntryGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.master.TableAction"
					name="TableEntryGet" process="get">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/CodeEntryShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- StandardJob gateway listener service -->
		<service category="tg-awm-publish" description="StandardJob publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="StandardJobPublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="StandardJob.GW" is-gateway="true"
					maxThreads="1" name="StandardJobGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="com.mincom.mib.esb.action.SetPropertyAction"
					name="SetProperties">
					<property name="properties">
						<set name="ClientID">'THEOS'</set>
					</property>
				</action>
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-awm-publish" />
					<property name="replayTarget" value="tg-awm-publish:StandardJobPublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-AWM channel for StandardJobPublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- StandardJob service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/StandardJobGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.maintenance.StandardJobAction"
					name="GetStandardJob" process="get">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="com.mincom.mib.esb.action.FreeMarkerAction"
					name="GenerateFromTemplate">
					<property name="template"
						value="/transforms/ellipse/StandardJobShowMapping.ftl" />
					<property name="set-payload-location" value="ReplyMessage" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- Equipment gateway listener service -->
		<service category="tg-awm-publish" description="Equipment publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="EquipmentPublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="Equipment.GW" is-gateway="true"
					maxThreads="1" name="EquipmentGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="com.mincom.mib.esb.action.SetPropertyAction"
					name="SetProperties">
					<property name="properties">
						<set name="ClientID">'THEOS'</set>
					</property>
				</action>
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-awm-publish" />
					<property name="replayTarget" value="tg-awm-publish:EquipmentPublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-AWM channel for EquipmentPublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Equipment service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/EquipmentGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.projectmanagement.EquipmentAction"
					name="GetEquipment" process="get">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/EquipmentShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- WorkOrder gateway listener service -->
		<service category="tg-awm-publish" description="WorkOrder publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="WorkOrderPublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="WorkOrder.GW" is-gateway="true"
					maxThreads="1" name="WorkOrderGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="com.mincom.mib.esb.action.SetPropertyAction"
					name="SetProperties">
					<property name="properties">
						<set name="ClientID">'THEOS'</set>
					</property>
				</action>
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-awm-publish" />
					<property name="replayTarget" value="tg-awm-publish:WorkOrderPublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-AWM channel for WorkOrderPublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- WorkOrder service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/MaintenanceOrderGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.workorder.WorkOrderAction"
					name="MaintenanceOrderGet" process="get">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/MaintenanceOrderShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- Planned Maintenance gateway listener service -->
		<service category="tg-awm-publish" description="Planned Maintenance publish channel"
			invmScope="GLOBAL" invmTransacted="false" name="PlannedMaintenancePublishService">
			<property name="maxThreads" value="1" />
			<property name="inVMLockStep" value="true" />
			<listeners>
				<jms-listener busidref="PlannedMaintenance.GW"
					is-gateway="true" maxThreads="1" name="PlannedMaintenanceGW-JMS-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="com.mincom.mib.esb.action.SetPropertyAction"
					name="SetProperties">
					<property name="properties">
						<set name="ClientID">'THEOS'</set>
					</property>
				</action>
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-awm-publish" />
					<property name="replayTarget"
						value="tg-awm-publish:PlannedMaintenancePublishService" />
				</action>
				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Ellipse event message received on Ellipse-AWM channel for PlannedMaintenancePublishService, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:20}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				<!-- Planned Maintanance service call -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/PlannedMaintenanceGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action
					class="com.mincom.mib.ellipse.maintenance.PlannedMaintenanceAction"
					name="GetPlannedMaintenance" process="get">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="com.mincom.mib.esb.action.FreeMarkerAction"
					name="GenerateFromTemplate">
					<property name="template"
						value="/transforms/ellipse/PlannedMaintenanceShowMapping.ftl" />
					<property name="set-payload-location" value="ReplyMessage" />
				</action>
				<!-- Set our response, in this case we will simple use the default mappings -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		<!-- Reply listener simply gets the messages from REPLY and ERROR and posts 
			them to OUTBOUND. -->
		<service category="tg-awm-publish"
			description="Internal service that is listening on the reply queues and broadcasting to the outbound topics and queues"
			invmScope="GLOBAL" name="ProcessOutReplyListener">
			<listeners>
				<jms-listener busidref="OUTBOUND.REPLY" is-gateway="true"
					maxThreads="1" name="Reply-Outbound-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.actions.Notifier" name="OutboundNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="ok">
							<target class="NotifyTopics">
								<topic connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.topic.tg.outbound:topic/TG.OUTBOUND}" />
							</target>
						</NotificationList>
					</property>
				</action>
			</actions>
		</service>
	</services>
</jbossesb>
