<?xml version="1.0"?>
<jbossesb parameterReloadSecs="5" 
	xmlns="http://anonsvn.labs.jboss.com/labs/jbossesb/trunk/product/etc/schemas/xml/jbossesb-1.3.0.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://anonsvn.labs.jboss.com/labs/jbossesb/trunk/product/etc/schemas/xml/jbossesb-1.3.0.xsd http://anonsvn.jboss.org/repos/labs/labs/jbossesb/trunk/product/etc/schemas/xml/jbossesb-1.3.0.xsd">
	<providers>
		<!-- This approach uses the JCA providers -->
		<jms-jca-provider adapter="hornetq-ra.rar"
			connection-factory="XAConnectionFactory" name="jms-jca-provider"
			transacted="true">  
			<!-- This gets around the issue of 4.9 not having the mapping and 4.10 
				does -->   
			<property name="jcaActivationMapper"     
				value="org.jboss.soa.esb.listeners.jca.JBossActivationMapper" />
			<jms-bus busid="UpdateProjectScheduleGW">
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="queue/TG.ELLIPSE-SUCCESS.IN" dest-type="QUEUE"
					selector="ReceiverID = 'TG-ELLIPSE'" transacted="true" />
			</jms-bus>              
			<jms-bus busid="TG.ELLIPSE-SUCCESS.IN">   
				<jms-message-filter acknowledge-mode="AUTO_ACKNOWLEDGE"
					dest-name="queue/TG.ELLIPSE-SUCCESS.IN" dest-type="QUEUE"
					selector="ReceiverID IS NULL OR ReceiverID NOT IN('TG-ELLIPSE')" persistent="true" transacted="true" /> 
			</jms-bus>   
			<jms-bus busid="MIB.COMMON.REPLY"> 
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="${mib.jms.queue.name.reply:queue/MIB.COMMON.REPLY}"
					dest-type="QUEUE" persistent="true" selector="ClientID = 'SUCCESS'"
					transacted="true" /> 
			</jms-bus>
			<jms-bus busid="MIB.COMMON.ERROR">
				<jms-message-filter acknowledge-mode="CLIENT_ACKNOWLEDGE"
					dest-name="${mib.jms.queue.name.error:queue/MIB.COMMON.ERROR}"
					dest-type="QUEUE" persistent="true" selector="ClientID = 'SUCCESS'"
					transacted="true" />   
			</jms-bus>
			<activation-config>
				<property name="reconnectInterval" value="1000" />
				<!-- We don't want to buffer the consumer side so we can better control 
					consumption from the queues -->
				<property name="ConsumerWindowSize" value="0" />
			</activation-config>
		</jms-jca-provider>
	</providers> 
	<services>
		<!-- Listen on our queue and route to standard inbound gateway -->
		<service category="tg-ellipse-success"
			description="Success inbound channel to call core component"
			invmScope="GLOBAL" name="SuccessInboundService">
			<property name="maxThreads" value="1" />
  			<property name="inVMLockStep" value="true" />			
			<listeners>
				<jms-listener busidref="TG.ELLIPSE-SUCCESS.IN"
					is-gateway="true" maxThreads="1" name="SuccessInboundListener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">
				<action class="com.mincom.mib.esb.action.SetPropertyAction"
					name="SetProperties">
					<property name="properties"> 
						<set name="ClientID">'SUCCESS'</set>
					</property>
				</action>
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="${mib.reply.error:err}">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.error}" />
							</target>
						</NotificationList>
						<NotificationList type="${mib.reply.ok:ok}">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="${mib.jms.queue.name.reply}" />
							</target>
						</NotificationList>
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-ellipse-success" />
					<property name="replayTarget" value="tg-ellipse-success:SuccessInboundService" />
				</action>

				<!-- Setup the default response -->
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/OAGISDefaultResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action>
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />

					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />

					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Success inbound channel message received to call core service, routing..." />
				</action>
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="${ellipse.numberOfInstances:50}" />
				</action>
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>
				
				<action class="com.mincom.mib.esb.action.ContentBasedDetour"
					name="EllipseServiceDetour" process="process">
					<property name="cbrAlias" value="Xpath" />
					<property name="ruleLanguage" />
					<property name="detourTimeout" value="${ellipse.detour.timeout:180000}" />
					<property name="destinations">
						<route-to destination-name="GetCodeEntry"
							expression="/*[local-name()='GetCodeEntry']" service-category="tg-ellipse-success"
							service-name="GetCodeEntry" />
						<route-to destination-name="GetProjectSchedule"
							expression="/*[local-name()='GetProjectSchedule']"
							service-category="tg-ellipse-success" service-name="GetProjectSchedule" />
						<route-to destination-name="ProcessProjectSchedule"
							expression="/*[local-name()='ProcessProjectSchedule']"
							service-category="tg-ellipse-success" service-name="ProcessProjectSchedule" />
						<default-route-to service-category="tg-ellipse-success"
							service-name="RouteToMIBCommon" />
					</property>
				</action>
				
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />
			</actions>
		</service>
		
		<!-- Update ProcessProjectSchedule -->
		<service category="tg-ellipse-success" 
			description="Service to procces custom ProjectSchedule task" invmScope="GLOBAL"
			name="CustomProcessProjectSchedule">
			<property name="maxThreads" value="1" />
  			<property name="inVMLockStep" value="true" />			
			<listeners>
				<jms-listener busidref="UpdateProjectScheduleGW" is-gateway="true"
					maxThreads="1" name="CustomProcessProjectScheduleListener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
			</listeners>
			<actions mep="OneWay">						
				<action class="org.jboss.soa.esb.actions.Notifier" name="SendResponseNotifier">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="${mib.reply.error:err}">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="queue/TG.ELLIPSE-SUCCESS.OUT" />
							</target>
						</NotificationList>
						<NotificationList type="${mib.reply.ok:ok}">
							<target class="NotifyQueues">
								<queue connection-factory="${mib.jms.queue.connectionFactory}"
									jndi-URL="${mib.jms.url}" jndi-context-factory="${mib.jms.contextFactory}"
									jndiName="queue/TG.ELLIPSE-SUCCESS.OUT" />
							</target> 
						</NotificationList>
					</property>
				</action>
				<!-- Store our message in the ESB Archive -->
				<action class="com.mincom.mib.esb.action.ESBMessageStoreAction"
					name="StoreMessage">
					<property name="statusOnOK" value="OK" />
					<property name="statusOnError" value="FAILED" />
					<property name="deployment" value="tg-ellipse-success" />
					<property name="replayTarget" value="tg-ellipse-success:CustomProcessProjectSchedule" />
				</action>
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="InitializeResponseMessage">
					<property name="smooksConfig">
						<exceptionMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
						<replyMapping config="/transforms/common/TGResponseMapping.xml"
							resultType="STRING" set-payload-location="ReplyMessage"
							storeBeanResults="MessageHeader" />
					</property>
				</action> 
				<action class="com.mincom.mib.esb.action.EMailHandler" name="SendEmailResponse">
					<property name="smooksConfig">
						<successMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
						<exceptionMapping config="/transforms/common/StandardEMailMapping.xml"
							resultType="STRING" />
					</property>
					<property name="sendOnOk" value="${mib.email.send.success:false}" />
					<property name="sendOnException" value="${mib.email.send.error:false}" />
					<property name="useResponseAsDefault" value="true" />
					<property name="host" value="${mib.email.host:mailhost}" />
					<property name="port" value="${mib.email.port:25}" />
					<property name="username" value="${mib.email.username}" />
					<property name="password" value="${mib.email.password}" />
					<property name="tls" value="${mib.email.tls:false}" />
					<property name="ssl" value="${mib.email.ssl:false}" />
					
					<property name="from" value="${mib.email.from:mib@mincom.com}" />
					<property name="to" value="${mib.email.to}" />
					<property name="subject"
						value="A {ServiceName} message has been received and processed successfully" />
					
					<property name="error.from" value="${mib.email.from:mib@mincom.com}" />
					<property name="error.to" value="${mib.email.to}" />
					<property name="error.subject"
						value="An error has occured processing a {ServiceName} message" />
				</action>  
				<!-- Log the message to the log file -->
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info" />
					<property name="message"
						value="Success inbound channel message received to call custom service, routing..." />
				</action>  
				<!-- Capture the common data from the header for use later -->
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapUserAreaToHeader">
					<property name="smooksConfig"
						value="/transforms/common/OAGISUserAreaMapping.xml" />
					<property name="set-payload-location" value="MessageHeader" />
					<property name="resultType" value="JAVA" />
				</action>
				<!-- Setup the default operation context used by Ellipse -->
				<action class="com.mincom.mib.ellipse.SetDefaultOperationContext"
					name="SetOperationContext">
					<property name="district" value="${ellipse.defaultDistrict}" />
					<property name="position" value="${ellipse.defaultPosition}" />
					<property name="numberOfInstances" value="50" />
				</action>
				<!-- Start a conversation with Ellipse --> 
				<action class="com.mincom.mib.ellipse.StartConversationAction"
					name="StartConversation">
					<property name="serviceUrl" value="${ellipse.serviceUrl}" />
					<property name="serviceUrl.1" value="${ellipse.serviceUrl.1:null}" />
					<property name="serviceUrl.2" value="${ellipse.serviceUrl.2:null}" />
					<property name="user" value="${ellipse.user}" />
					<property name="password" value="${ellipse.password}" />
				</action>    
				
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/inbound/ProjectScheduleMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				 
				<action class="com.mincom.mib.ellipse.TransactionAction" 
					name="StartTransaction" process="start" />
				<!-- Invoke Training action to call Ellipse service -->  
				
				<action class="com.transgrid.mib.ellipse.success.action.UpdateProjectScheduleAction"
					name="ModifyProjectSchedule" process="process">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>       
				 
				<action class="com.mincom.mib.ellipse.TransactionAction"
					name="CompleteTransaction" process="commit" />  
				 
				<action class="com.mincom.mib.esb.action.ResponseHandler"
					name="SetResponseMessage">
					<property name="smooksConfig">
						<replyMapping config="/transforms/common/OAGISResponseMapping.xml"
							get-payload-location="ReplyMessage" resultType="STRING"
							useResponseAsDefault="true" />
					</property>
				</action>
				<!-- End the Ellipse conversation -->
				<action class="com.mincom.mib.ellipse.EndConversationAction"
					name="EndConversation" />  
			</actions>   
		</service>
		
		<!-- Table Code Entry -->
		<service category="tg-ellipse-success" description="get code entries"
			invmScope="GLOBAL" invmTransacted="false" name="GetCodeEntry">
			<property name="inVMLockStep" value="true" />
			<actions mep="RequestResponse">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/CodeEntryGetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.master.TableAction"
					name="TableEntryGet" process="get">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/CodeEntryShowMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
			</actions>
		</service>

		<!-- Project Schedule -->
		<service category="tg-ellipse-success" description="Get Project Schedule"
			invmScope="GLOBAL" invmTransacted="false" name="GetProjectSchedule">
			<property name="inVMLockStep" value="true" />
			<actions mep="RequestResponse">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/ProjectSchedule2GetMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action
					class="com.mincom.mib.ellipse.projectmanagement.ProjectScheduleAction2"
					name="GetProjectSchedule" process="get">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="com.mincom.mib.esb.action.FreeMarkerAction"
					name="GenerateFromTemplate">
					<property name="template"
						value="/transforms/ellipse/ProjectScheduleShowMapping2.ftl" />
					<property name="set-payload-location" value="ReplyMessage" />
				</action>
			</actions>
		</service>

		<!-- Process Project Schedule -->
		<service category="tg-ellipse-success" description="Process Project Schedule"
			invmScope="GLOBAL" invmTransacted="false" name="ProcessProjectSchedule">
			<property name="inVMLockStep" value="true" />
			<actions mep="RequestResponse">
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapMessageToDTOs">
					<property name="smooksConfig"
						value="/transforms/ellipse/ProjectScheduleMapping.xml" />
					<property name="set-payload-location" value="RequestDTOs" />
					<property name="resultType" value="JAVA" />
				</action>
				<action class="com.mincom.mib.ellipse.TransactionAction"
					name="StartTransaction" process="start" />
				<action
					class="com.mincom.mib.ellipse.projectmanagement.ProjectScheduleAction"
					name="ProcessProjectSchedule" process="process">
					<property name="get-payload-location" value="RequestDTOs" />
				</action>
				<action class="org.jboss.soa.esb.smooks.SmooksAction" name="MapDTOsToReply">
					<property name="smooksConfig"
						value="/transforms/ellipse/ProjectScheduleAckMapping.xml" />
					<property name="get-payload-location" value="ReplyDTOs" />
					<property name="set-payload-location" value="ReplyMessage" />
					<property name="resultType" value="STRING" />
				</action>
				<action class="com.mincom.mib.ellipse.TransactionAction"
					name="CompleteTransaction" process="commit" />
			</actions>
		</service>
		
		<!-- Can be used as the default detour -->
		<service category="tg-ellipse-success"
				description="Default for when system message cannot be routed"
				invmScope="GLOBAL" invmTransacted="false" name="RouteToMIBCommon">
			<property name="inVMLockStep" value="true"/>
			<actions mep="RequestResponse">
				<action class="org.jboss.soa.esb.actions.LogAction" name="LogMessage">
					<property name="logLevel" value="info"/>
					<property name="message" value="Message is being routed to MIB core channel from Success.."/>
				</action>
				<action class="com.mincom.mib.esb.action.JMSWireTap" name="RouteToMIB">
					<property name="jndiName" value="queue/MIB.COMMON.GW"/>
					<property name="jndi-context-factory" value="${mib.jms.contextFactory}"/>
					<property name="jndi-URL" value="${mib.jms.url}"/>
					<property name="connection-factory" value="${mib.jms.queue.connectionFactory}"/>
					<property name="unwrap" value="true"/>
				</action>
			</actions>
		</service>
		
		<!-- Reply listener simply gets the messages from REPLY and ERROR and posts 
			them to OUTBOUND. It is only getting the ones -->
		<service category="tg-ellipse-success"
			description="Internal service that is listening on the reply queues and broadcasting to the outbound topics and queues"
			invmScope="GLOBAL" name="ProcessReplyListener">
			<listeners>
				<jms-listener busidref="MIB.COMMON.REPLY" is-gateway="true"
					maxThreads="1" name="Reply-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener>
				<jms-listener busidref="MIB.COMMON.ERROR" is-gateway="true"
					maxThreads="1" name="Error-Listener">
					<property name="composer-class" value="com.mincom.mib.esb.JMSMessageComposer" />
				</jms-listener> 
			</listeners> 
			<actions mep="OneWay">
				<action class="org.jboss.soa.esb.actions.SystemPrintln" name="DisplayMessage">
					<property name="message" value="Message received on reply channel to Ellipse-Success OUT Queue..." />
					<property name="printfull" value="true" />
				</action>
				<action class="org.jboss.soa.esb.actions.Notifier" name="BroadcastResults">
					<property name="okMethod" value="notifyOK" />
					<property name="exceptionMethod" value="notifyError" />
					<property name="destinations">
						<NotificationList type="ok">
							<target class="NotifyQueues">
								<queue connection-factory="XAConnectionFactory" jndiName="queue/TG.ELLIPSE-SUCCESS.OUT" />
							</target>
						</NotificationList>
						<NotificationList type="err">
							<target class="NotifyQueues">
								<queue connection-factory="XAConnectionFactory" jndiName="queue/TG.ELLIPSE-SUCCESS.OUT" />
							</target>
						</NotificationList>
					</property>
				</action>
			</actions>
		</service>
	</services>
</jbossesb>
